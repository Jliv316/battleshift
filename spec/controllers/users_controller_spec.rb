require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {
    first_name:   'Sally',
    last_name:    'Smith',
    username:     'yeah22@gmail.com',
    password:     'password',
    api_key:      "#{User.generate_api_key}",
    activated:    false
    }
  }

  let(:alternative_attributes) { {
    first_name:   'Bob',
    last_name:    'Smith',
    username:     'yeah11@gmail.com',
    password:     'password',
    api_key:      "#{User.generate_api_key}",
    activated:    false
    }
  }

  let(:invalid_attributes) { {
    name:         'Yeah'
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      user = User.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      user = User.create! valid_attributes
      get :show, params: {id: user.to_param}, session: valid_session
      expect(response).to be_success
    end

    it "activates a user who was not activated before if they come from an activation email" do
      user = User.create! valid_attributes
      request.session[:activate] = true

      get :show, params: {id: user.to_param}, session: valid_session

      expect(response).to be_success
      expect(User.find(user.id).activated).to be true
      expect(controller).to set_flash.now[:notice].to(/User was activated/)
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      user = User.create! valid_attributes
      get :edit, params: {id: user.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new User" do
        expect {
          post :create, params: {user: valid_attributes}, session: valid_session
        }.to change(User, :count).by(1)
      end

      it "redirects to the created user" do
        post :create, params: {user: valid_attributes}, session: valid_session
        expect(response).to redirect_to("/dashboard/#{User.last.id}")
      end

      it 'creates and activates a user who comes from an invitation email' do
        user = User.create! valid_attributes

        stub_request(:post, "http://test.host/api/v1/games").
        with(
          body: {"headers"=>{"HTTP_X_API_KEY"=>"#{user.api_key}"}, "params"=>{"opponent_email"=>"yeah11@gmail.com"}},
          headers: {
         'Accept'=>'*/*',
         'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
         'Content-Type'=>'application/x-www-form-urlencoded',
         'User-Agent'=>'Faraday v0.15.2'
          }).
        to_return(status: 200, body: {id: 1}.to_json, headers: {})

        request.session[:from] = "invitation"
        request.session[:start] = user.id

        post :create, params: {user: alternative_attributes }, session: valid_session

        expect(response.status).to eq(302)
        expect(controller).to set_flash[:notice].to(/Logged in as/)
        expect(response).to redirect_to("/dashboard/#{User.last.id}")
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {user: invalid_attributes}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          first_name:   'Bob2',
          last_name:    'Smith2',
          username:     'yeah2@gmail.com',
          password:     'password',
          api_key:      "#{User.generate_api_key}",
          activated:    false
          }
      }

      it "redirects to the user" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: valid_attributes}, session: valid_session
        expect(response).to redirect_to(user)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: invalid_attributes}, session: valid_session
        expect(response).to_not be_success
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      expect {
        delete :destroy, params: {id: user.to_param}, session: valid_session
      }.to change(User, :count).by(-1)
    end

    it "redirects to the users list" do
      user = User.create! valid_attributes
      delete :destroy, params: {id: user.to_param}, session: valid_session
      expect(response).to redirect_to(users_url)
    end
  end

end
